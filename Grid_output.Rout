
> sink(zz, type = "message")

> # Import data from CRAN
> library(archdata)

> data("BarmoseI.grid")

> data("BarmoseI.pp")

> Easts <- sort(unique(BarmoseI.grid$East))

> Norths <- sort(unique(BarmoseI.grid$North))

> BarmoseI_Cores.pp <- BarmoseI.pp[BarmoseI.pp[, "Label"]=="Cores",]

> library(spatstat)
Loading required package: spatstat.data
Loading required package: nlme
Loading required package: rpart

spatstat 1.64-1       (nickname: ‘Help you I can, yes!’) 
For an introduction to spatstat, type ‘beginner’ 


Note: spatstat version 1.64-1 is out of date by more than 6 months; we recommend upgrading to the latest version.

> BarmoseI_Cores.ppp <- ppp(BarmoseI_Cores.pp$East, BarmoseI_Cores.pp$North, window=owin(xrange=c(0, max(Easts)+1), yrange=c(0, max(Norths)+1)))

> summary(BarmoseI_Cores.ppp)
Planar point pattern:  81 points
Average intensity 0.4821429 points per square unit

Coordinates are given to 2 decimal places
i.e. rounded to the nearest multiple of 0.01 units

Window: rectangle = [0, 12] x [0, 14] units
Window area = 168 square units

> # Convert to stars array
> library(stars)
Loading required package: abind
Loading required package: sf
Linking to GEOS 3.9.0dev, GDAL 3.2.0, PROJ 7.2.0

> packageVersion("stars")
[1] ‘0.4.4’

> BarmoseI.grid1 <- BarmoseI.grid

> if (packageVersion("stars") < "0.4.4") {
+   BarmoseI.grid1$North <- BarmoseI.grid1$North + 1
+ } else {
+   BarmoseI.grid1$North <- BarmoseI.grid1$ .... [TRUNCATED] 

> # data registed to SW cell corner, stars bug 0.4-2, 0.4-3 and 0.4-4 before
> # late October 2020; stars >= 0.4-2 required by current tmap;
> # stars .... [TRUNCATED] 

> # impose a plate carree projection to satisfy tmap
> st_crs(rast) <- 32662

> rast1 <- rast

> rast1$logp1_Debitage <- log10(rast1$Debitage+1)

> # convert to sf data.frame
> library(sf)

> barmose0 <- st_as_sf(rast)

> barmose <- barmose0[!is.na(barmose0$Debitage),]

> cores <- st_as_sf(BarmoseI_Cores.pp, coords=c("East", "North"))

> # impose a plate carree projection to satisfy tmap
> st_crs(cores) <- 32662

> jpeg("Barmose_Grid_Check.jpeg", width=15, height=17, units="cm", res=300)

> opar <- par(no.readonly=TRUE)

> par(mar=c(0,0,0,0)+0.1)

> plot(BarmoseI_Cores.ppp, chars=24, pt.bg="grey", cex=0.7, legend=FALSE)

> abline(v=Easts, lwd=0.5, lty=2)

> abline(h=Norths, lwd=0.5, lty=2)

> points(North ~ East, BarmoseI.grid, pch=3)

> plot(st_geometry(barmose), add=TRUE, lwd=0.5, border="orange")

> par(opar)

> dev.off()
null device 
          1 

> library(tmap)

> Log_Deb_map <- tm_shape(rast1, unit="m") + 
+   tm_raster("logp1_Debitage", n=7, palette="viridis",
+             title="Debitage\n(log count)") + 
 .... [TRUNCATED] 

> jpeg("Barmose_Grid_Cores.jpeg", width=15, height=17, units="cm", res=300)

> Log_Deb_map

> dev.off()
null device 
          1 

> barmose$cores <- sapply(st_intersects(barmose, cores), length)

> barmose$class <- factor((barmose$cores>0)+0, levels=c(0, 1), labels=c("No Core", "Core"))

> sum(barmose$cores) # 86 for stars 0.4-4 and using sf::st_intersects
[1] 84

> table(barmose$cores)

 0  1  2  3  4  5  6  7 
69 19  8  2  5  2  1  1 

> #  0  1  2  3  4  5  6  9 
> # 69 18 11  2  2  1  3  1 
> table(barmose$class)

No Core    Core 
     69      38 

> # NC  C 
> # 69 38 
> 
> class_map <- tm_shape(barmose, unit="m") + 
+   tm_fill("class", palette="viridis") + 
+   tm_shape(cores, unit="m") + 
+   .... [TRUNCATED] 

> jpeg("Barmose_class_Cores.jpeg", width=15, height=17, units="cm", res=300)

> class_map

> dev.off()
null device 
          1 

> # Create neighbours
> 
> ## Contiguity neighbours l-order, l = 3 - USE ONLY WHEN WINDOW IS LARGER THAN 1ST ORDER!
> 
> library(spdep)
Loading required package: sp
Loading required package: spData

> nb1 <- poly2nb(barmose)

> barmose.nb <- nblag(nb1, 2) ## higher orders

> barmose.mat <- as(nb2listw(nblag_cumul(barmose.nb), style="B"), "CsparseMatrix")
Registered S3 methods overwritten by 'spatialreg':
  method                   from 
  residuals.stsls          spdep
  deviance.stsls           spdep
  coef.stsls               spdep
  print.stsls              spdep
  summary.stsls            spdep
  print.summary.stsls      spdep
  residuals.gmsar          spdep
  deviance.gmsar           spdep
  coef.gmsar               spdep
  fitted.gmsar             spdep
  print.gmsar              spdep
  summary.gmsar            spdep
  print.summary.gmsar      spdep
  print.lagmess            spdep
  summary.lagmess          spdep
  print.summary.lagmess    spdep
  residuals.lagmess        spdep
  deviance.lagmess         spdep
  coef.lagmess             spdep
  fitted.lagmess           spdep
  logLik.lagmess           spdep
  fitted.SFResult          spdep
  print.SFResult           spdep
  fitted.ME_res            spdep
  print.ME_res             spdep
  print.lagImpact          spdep
  plot.lagImpact           spdep
  summary.lagImpact        spdep
  HPDinterval.lagImpact    spdep
  print.summary.lagImpact  spdep
  print.sarlm              spdep
  summary.sarlm            spdep
  residuals.sarlm          spdep
  deviance.sarlm           spdep
  coef.sarlm               spdep
  vcov.sarlm               spdep
  fitted.sarlm             spdep
  logLik.sarlm             spdep
  anova.sarlm              spdep
  predict.sarlm            spdep
  print.summary.sarlm      spdep
  print.sarlm.pred         spdep
  as.data.frame.sarlm.pred spdep
  residuals.spautolm       spdep
  deviance.spautolm        spdep
  coef.spautolm            spdep
  fitted.spautolm          spdep
  print.spautolm           spdep
  summary.spautolm         spdep
  logLik.spautolm          spdep
  print.summary.spautolm   spdep
  print.WXImpact           spdep
  summary.WXImpact         spdep
  print.summary.WXImpact   spdep
  predict.SLX              spdep

> # Join-Count Statistics
> ## JC for contiguity
> 
> jc.barmose <- vector(mode="list", length=length(barmose.nb))

> jc.barmose.p <- vector(mode="list", length=length(barmose.nb))

> for (i in 1:length(barmose.nb)) {
+   jc.barmose[[i]] <- joincount.multi(barmose$class, nb2listw(barmose.nb[[i]]))
+   jc.barmose.p[[i]] <- pnorm(jc .... [TRUNCATED] 

> ## Exporting output
> 
> jcs <- do.call("rbind", jc.barmose)[-c(4, 8),]

> jcps <- do.call("c", jc.barmose.p)[-c(4, 8)]

> (jc_out <- data.frame(order=rep(c("First", "Second"), each=3), JCS=rownames(jcs), as.data.frame(cbind(jcs, pvalue=jcps)), row.names=NULL))
   order             JCS Joincount  Expected  Variance    z.value       pvalue
1  First No Core:No Core 24.044048 22.132075 0.5678672  2.5372203 0.0055868304
2  First       Core:Core  8.915476  6.632075 0.4851153  3.2783827 0.0005220186
3  First    Core:No Core 20.540476 24.735849 1.8256763 -3.1049791 0.9990485376
4 Second No Core:No Core 22.001997 22.132075 0.4986978 -0.1841983 0.5730710605
5 Second       Core:Core  7.720851  6.632075 0.3352042  1.8805452 0.0300169049
6 Second    Core:No Core 23.777151 24.735849 1.1140353 -0.9083061 0.8181417412

> write.csv(jc_out, "barmose_jc_out.csv", row.names=FALSE)

> ###########################################
> ## Boots' LICD (from Boots 2003) ##
> ###########################################
> ## Set column with .... [TRUNCATED] 

> adata <- factor(barmose[[clm]]) #object with "levels" (factor)

> #### STEP 1: local composition
> p <- (as.matrix(summary(adata)))/length(adata) #probabilities of each "type"

> adata <- as.numeric(adata) #factor no longer necessary, now numeric

>   ## Routine 1 ##
>   # cluster has 5 columns: 1 - number of units of the "type" as the unit j in the "window
>   # 2 - probability of the "type", 3 ..." ... [TRUNCATED] 

> c1 <- c2 <- c3 <- c4 <- c5 <- numeric(length(adata))

> for (i in 1:length(adata)) {
+     c1[i] <- (barmose.mat[i,] %*% ifelse(adata==2,1,0))+ifelse(adata[i]==2,1,0)
+     c2[i] <- p[2]
+     c3[i] <- su .... [TRUNCATED] 

> cluster <- cbind(c1, c2, c3, c4, c5)

>   cluster[is.nan(cluster)]<- 1

>   ## End of routine 1 ##
>   
>   ### Custer-outlier analysis -> result of local composition ###
>   sc <- 1-(1-0.05)^(1/2) #Sidak correction, 0.05  .... [TRUNCATED] 

>   local_comp <- ifelse(cluster[,4]< sc, 1, ifelse(cluster[,5]< sc, 0, -1))

>   # 1 for black, 0 for white, -1 - black-white
>   
>   #### STEP 2: local configuration
>   
>   ## Routine 2  ##
>   ## We built empirical distrib .... [TRUNCATED] 

> for (j in 1:length(adata))  {
+     barmose.mat.1 <- barmose.mat[j,] #extracting a row from weights matrix
+     ktore <- which(barmose.mat.1!=0, ar .... [TRUNCATED] 

>   ## End of routine 2 ##
>   
>   colnames(JC.pvalue_seq) <- c("1:1X>=x","0:0X>=x", "1:0X>=x")

>   local_config <- matrix(3,length(adata),1)

>   scJC <- 1-(1-0.05)^(1/3) # Sidak correction JC - 3 tests!

>   #scJC <- 0.05 #standard
>   
>   ### Routine 3 Local configuration
>   
>   local_config <- matrix(nrow=length(adata), ncol=1)

> for (j in 1:length(adata)) {#for black is 1, for white is 0, for black-white is -1, otherwise -2
+     if (min(JC.pvalue_seq[j,])<scJC){
+       ife .... [TRUNCATED] 

>   ## End of routine 3 ##
>   colnames(local_config) <- c("cluster-dispersion")

> # Combination of local composition and local configuration
> Type <- character(length(adata))

> C <- cbind(local_comp, local_config)

> for (i in 1:length(adata)){
+   ifelse(C[i,1] == 1 && C[i,2] == 1, Type[i] <- "Hot Clump",
+          ifelse(C[i,1] == 1 && (C[i,2] == -2 || C[i,2]  .... [TRUNCATED] 

> barmose$Type <- factor(Type)

> types_map <- tm_shape(barmose, unit="m") + 
+   tm_fill("Type", palette="viridis") + 
+   tm_scale_bar(breaks=c(0,1,2), position=c("right", "bottom" .... [TRUNCATED] 

> jpeg("Barmose_types_Cores.jpeg", width=15, height=17, units="cm", res=300)

> types_map

> dev.off()
null device 
          1 

> # Plot Cores + LICD - TIFF + JPEG
> 
> LICDClass <- interaction(barmose$class, barmose$Type, sep=" ")

> barmose$LICDClass <- factor(LICDClass, levels=c("Core Hot only", "Core Clump only (Hot)", "Core Hot Clump", "Core No cluster", "No Core Hot only", " ..." ... [TRUNCATED] 

> LICDClass_map <- tm_shape(barmose, unit="m") + 
+   tm_fill("LICDClass", palette="-viridis", title="Classes + LICD") + 
+   tm_scale_bar(breaks=c(0, .... [TRUNCATED] 

> jpeg("Barmose_LICD_class.jpeg", width=15, height=17, units="cm", res=300)

> LICDClass_map

> dev.off()
null device 
          1 

> sessionInfo()
R version 4.0.3 (2020-10-10)
Platform: x86_64-pc-linux-gnu (64-bit)
Running under: Fedora 32 (Workstation Edition)

Matrix products: default
BLAS:   /home/rsb/topics/R/R403-share/lib64/R/lib/libRblas.so
LAPACK: /home/rsb/topics/R/R403-share/lib64/R/lib/libRlapack.so

locale:
 [1] LC_CTYPE=en_GB.UTF-8       LC_NUMERIC=C              
 [3] LC_TIME=en_GB.UTF-8        LC_COLLATE=en_GB.UTF-8    
 [5] LC_MONETARY=en_GB.UTF-8    LC_MESSAGES=en_GB.UTF-8   
 [7] LC_PAPER=en_GB.UTF-8       LC_NAME=C                 
 [9] LC_ADDRESS=C               LC_TELEPHONE=C            
[11] LC_MEASUREMENT=en_GB.UTF-8 LC_IDENTIFICATION=C       

attached base packages:
[1] stats     graphics  grDevices utils     datasets  methods   base     

other attached packages:
 [1] Matrix_1.2-18       spdep_1.1-5         spData_0.3.8       
 [4] sp_1.4-4            tmap_3.2            stars_0.4-4        
 [7] sf_0.9-6            abind_1.4-5         spatstat_1.64-1    
[10] rpart_4.1-15        nlme_3.1-150        spatstat.data_1.4-3
[13] archdata_1.2       

loaded via a namespace (and not attached):
 [1] Rcpp_1.0.5            lattice_0.20-41       deldir_0.1-29        
 [4] gtools_3.8.2          png_0.1-7             class_7.3-17         
 [7] digest_0.6.27         spDataLarge_0.5.0     R6_2.4.1             
[10] coda_0.19-4           e1071_1.7-4           tensor_1.5           
[13] pillar_1.4.6          rlang_0.4.8           gdata_2.18.0         
[16] raster_3.3-15         gmodels_2.18.1        goftest_1.2-2        
[19] splines_4.0.3         htmlwidgets_1.5.2     polyclip_1.10-0      
[22] compiler_4.0.3        pkgconfig_2.0.3       tmaptools_3.1        
[25] base64enc_0.1-3       mgcv_1.8-33           htmltools_0.5.0      
[28] tidyselect_1.1.0      expm_0.999-5          tibble_3.0.4         
[31] codetools_0.2-16      XML_3.99-0.5          viridisLite_0.3.0    
[34] crayon_1.3.4          dplyr_1.0.2           spatialreg_1.1-6     
[37] MASS_7.3-53           grid_4.0.3            lwgeom_0.2-5         
[40] lifecycle_0.2.0       DBI_1.1.0             magrittr_1.5         
[43] units_0.6-7           KernSmooth_2.23-17    LearnBayes_2.15.1    
[46] leafsync_0.1.0        leaflet_2.0.3         ellipsis_0.3.1       
[49] generics_0.0.2        vctrs_0.3.4           spatstat.utils_1.17-0
[52] boot_1.3-25           RColorBrewer_1.1-2    tools_4.0.3          
[55] dichromat_2.0-0       leafem_0.1.3          glue_1.4.2           
[58] purrr_0.3.4           crosstalk_1.1.0.1     parallel_4.0.3       
[61] classInt_0.4-3       

> sf_extSoftVersion()
          GEOS           GDAL         proj.4 GDAL_with_GEOS     USE_PROJ_H 
    "3.9.0dev"        "3.2.0"        "7.2.0"         "true"         "true" 

> sink(type = "message")

> sink()
